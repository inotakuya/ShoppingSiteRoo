// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package jp.com.inotaku.domain;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import jp.com.inotaku.domain.Consumer;
import jp.com.inotaku.domain.ConsumerDataOnDemand;
import jp.com.inotaku.repository.ConsumerRepository;
import jp.com.inotaku.service.ConsumerService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect ConsumerDataOnDemand_Roo_DataOnDemand {
    
    declare @type: ConsumerDataOnDemand: @Component;
    
    private Random ConsumerDataOnDemand.rnd = new SecureRandom();
    
    private List<Consumer> ConsumerDataOnDemand.data;
    
    @Autowired
    ConsumerService ConsumerDataOnDemand.consumerService;
    
    @Autowired
    ConsumerRepository ConsumerDataOnDemand.consumerRepository;
    
    public Consumer ConsumerDataOnDemand.getNewTransientConsumer(int index) {
        Consumer obj = new Consumer();
        setConsumerName(obj, index);
        setEmail(obj, index);
        setPassword(obj, index);
        setPoint(obj, index);
        return obj;
    }
    
    public void ConsumerDataOnDemand.setConsumerName(Consumer obj, int index) {
        String consumerName = "consumerName_" + index;
        obj.setConsumerName(consumerName);
    }
    
    public void ConsumerDataOnDemand.setEmail(Consumer obj, int index) {
        String email = "foo" + index + "@bar.com";
        obj.setEmail(email);
    }
    
    public void ConsumerDataOnDemand.setPassword(Consumer obj, int index) {
        String password = "password_" + index;
        obj.setPassword(password);
    }
    
    public void ConsumerDataOnDemand.setPoint(Consumer obj, int index) {
        int point = index;
        obj.setPoint(point);
    }
    
    public Consumer ConsumerDataOnDemand.getSpecificConsumer(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Consumer obj = data.get(index);
        Long id = obj.getId();
        return consumerService.findConsumer(id);
    }
    
    public Consumer ConsumerDataOnDemand.getRandomConsumer() {
        init();
        Consumer obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return consumerService.findConsumer(id);
    }
    
    public boolean ConsumerDataOnDemand.modifyConsumer(Consumer obj) {
        return false;
    }
    
    public void ConsumerDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = consumerService.findConsumerEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Consumer' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Consumer>();
        for (int i = 0; i < 10; i++) {
            Consumer obj = getNewTransientConsumer(i);
            try {
                consumerService.saveConsumer(obj);
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            consumerRepository.flush();
            data.add(obj);
        }
    }
    
}
