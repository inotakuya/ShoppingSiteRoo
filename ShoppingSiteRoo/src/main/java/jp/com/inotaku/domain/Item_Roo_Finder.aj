// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package jp.com.inotaku.domain;

import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;
import jp.com.inotaku.domain.Item;

privileged aspect Item_Roo_Finder {
    
    public static Long Item.countFindItemsByItemNameLike(String itemName) {
        if (itemName == null || itemName.length() == 0) throw new IllegalArgumentException("The itemName argument is required");
        itemName = itemName.replace('*', '%');
        if (itemName.charAt(0) != '%') {
            itemName = "%" + itemName;
        }
        if (itemName.charAt(itemName.length() - 1) != '%') {
            itemName = itemName + "%";
        }
        EntityManager em = Item.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Item AS o WHERE LOWER(o.itemName) LIKE LOWER(:itemName)", Long.class);
        q.setParameter("itemName", itemName);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<Item> Item.findItemsByItemNameLike(String itemName) {
        if (itemName == null || itemName.length() == 0) throw new IllegalArgumentException("The itemName argument is required");
        itemName = itemName.replace('*', '%');
        if (itemName.charAt(0) != '%') {
            itemName = "%" + itemName;
        }
        if (itemName.charAt(itemName.length() - 1) != '%') {
            itemName = itemName + "%";
        }
        EntityManager em = Item.entityManager();
        TypedQuery<Item> q = em.createQuery("SELECT o FROM Item AS o WHERE LOWER(o.itemName) LIKE LOWER(:itemName)", Item.class);
        q.setParameter("itemName", itemName);
        return q;
    }
    
    public static TypedQuery<Item> Item.findItemsByItemNameLike(String itemName, String sortFieldName, String sortOrder) {
        if (itemName == null || itemName.length() == 0) throw new IllegalArgumentException("The itemName argument is required");
        itemName = itemName.replace('*', '%');
        if (itemName.charAt(0) != '%') {
            itemName = "%" + itemName;
        }
        if (itemName.charAt(itemName.length() - 1) != '%') {
            itemName = itemName + "%";
        }
        EntityManager em = Item.entityManager();
        String jpaQuery = "SELECT o FROM Item AS o WHERE LOWER(o.itemName) LIKE LOWER(:itemName)";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<Item> q = em.createQuery(jpaQuery, Item.class);
        q.setParameter("itemName", itemName);
        return q;
    }
    
}
